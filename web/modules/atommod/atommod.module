<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\devel\Plugin\Devel\Dumper\Kint;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

 function atommod_page_attachments_alter(array &$attachments)
 {
   /**
    * Retire meta generator
    */
   foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
     if ($attachment[1] == 'system_meta_generator') {
       unset($attachments['#attached']['html_head'][$key]);
     }
   }
 
   /*ajoute css admin*/
   $admin_theme = \Drupal::config('system.theme')->get('admin');
   $admin_theme_name = \Drupal::service('theme_handler')->getName($admin_theme);
//    dsm($admin_theme_name);
   if ($admin_theme_name == 'Claro') {
     $attachments['#attached']['library'][] = 'atommod/extra.admin';
   }
 
   /* charge library si role est webmaster a */
   $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
   if ($current_user->hasRole('content_editor')) {
 
     $attachments['#attached']['library'][] = 'atommod/extra.editor';
     // return;
   }
 }
 

/**
 * Attache form id  à to les form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 * @return array
 */
function atommod_attach_form_id(&$form, $form_id)
{
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    atommod_attach_form_id($form[$child], $form_id); // recurse for children
  }
}

//Modification des formulaire
function atommod_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  atommod_attach_form_id($form, $form['#id']);
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
 
  if (($form_id === 'user_form') || ($form_id === 'user_register_form')) {
   
    if (($current_user->hasRole('administrator')) || ($current_user->id() == '1')) {
        //si admin retire l'ajout ou modification du rôle authenticated
      // if (isset($form['account']['roles']['#options'])) {
      //   unset($form['account']['roles']['#options']['authenticated']);
      // }
         //si role à éditer "authenticted" => user 1, retire status et roles
        //  if ($form_id === 'user_form') {
        //   if ((isset($form['account']['roles']['#default_value']))
        //     && (($form['account']['roles']['#default_value'] == 'authenticated'))
        //   ) {
        //     $form['account']['roles']['#access'] = FALSE;
        //     $form['account']['status']['#access'] = FALSE;
        //   }
        // }
      return;
    } else {
      if (($current_user->hasRole('content_editor'))) {
        if ($form_id === 'user_form') {
        
          $user = $form_state->getFormObject()->getEntity();
          // Kint($user);
          if ($user->hasRole('administrator')) {
            throw new AccessDeniedHttpException();
          }
        }

        if ($form_id === 'user_register_form') {
          $form['account']['notify']['#access'] = FALSE;
        }
        if (isset($form['account']['roles']['#options'])) {
          unset($form['account']['roles']['#options']['administrator']);
          // unset($form['account']['roles']['#options']['authenticated']);
        }

        // $form['timezone']['#access'] = FALSE;
        // $form['language']['#access'] = FALSE;
        
      } 
      // else {
      //   if (isset($form['account']['status'])) {
      //     $form['account']['status']['#access'] = FALSE;
      //   }
      // }
    }
  }
//  Kint($form_id);
 /*Gestion accès form Add et edit */
 $nodetype = array(
  "node_actualite_form", "node_actualite_edit_form",
  "node_note_form", "node_note_edit_form",
  "node_page_form", "node_page_edit_form",
  // "node_page_form", "taxonomy_term_categories_actualites_form",

);
// dsm($form);
if (in_array($form_id, $nodetype)) {
  $form['revision']['#access'] = FALSE;
  $form['revision_log']['#access'] = FALSE;
  // $form['simple_sitemap_index_now']['#access'] = FALSE;
  $form['status']['#access'] = TRUE;
}

$nodetype = array(
 "taxonomy_term_categories_actualites_form",
 "taxonomy_term_thematiques_form",
 "media_document_edit_form", "media_document_add_form",
 "media_audio_edit_form", "media_audio_add_form",
 "media_image_edit_form", "media_image_add_form",
 "media_video_edit_form", "media_video_add_form",
 "media_remote_video_edit_form", "media_remote_video_add_form",

);
// Kint($form);
if (in_array($form_id, $nodetype)) {
  $form['revision']['#access'] = FALSE;
  $form['revision_log']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;
  $form['relations']['#access'] = FALSE;
  // $form['simple_sitemap_index_now']['#access'] = FALSE;
  // $form['status']['#access'] = TRUE;
}
} //FORM_ALTER





function atommod_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability)
{
  // dsm($route_name);
  // dsm($route_name);
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());

  if (($current_user->hasRole('administrator')) || ($current_user->id() == '1')) {
    //juste pour tester fonctionnement, à effacer/commenter en prod
    // $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(37);
    return;
  }


  if ($current_user->hasRole('content_editor')) {
    /*retire onglets droits et roles pour webmmster reseau*/
    if ($route_name == 'entity.user.collection'  && isset($data['tabs'][0])) {
      // Remove all tabs from user login form.
      foreach ($data['tabs'][0] as $key => $tab) {
        $data['tabs'][0][$key]['#access'] = FALSE;
      }
    }

    // /*retire les onglets sur vue user*/
    if (($route_name == 'entity.user.canonical')) {
      foreach ($data['tabs'][0] as $key => $tab) {
        $data['tabs'][0][$key]['#access'] = FALSE;
      }
    }

    if (($route_name == 'user.admin_permissions') || ($route_name == 'entity.taxonomy_vocabulary.entity_permissions_form')
     || ($route_name == 'entity.user_role.collection')) {
      foreach ($data['tabs'][0] as $key => $tab) {
        $data['tabs'][0][$key]['#access'] = FALSE;
        throw new AccessDeniedHttpException();
      }
    }

    // return;
  }

    /*retire lien login dans simple login*/
    if (($route_name == 'user.login'  && isset($data['tabs'][0])) || ($route_name == 'user.pass'  && isset($data['tabs'][0]))) {
      // Remove all tabs from user login form.
      foreach ($data['tabs'][0] as $key => $tab) {
        $data['tabs'][0][$key]['#access'] = FALSE;
      }
    }

        /*retire lien login dans simple login*/
        if ($route_name == 'entity.taxonomy_vocabulary.overview_form'  && isset($data['tabs'][0])) {
          // Remove all tabs from user login form.
          foreach ($data['tabs'][0] as $key => $tab) {
            $data['tabs'][0][$key]['#access'] = FALSE;
          }
        }
  }

/*REtire bulk operations sur page admin user, content, media*/
function atommod_views_pre_view(ViewExecutable $view, $display_id, array &$args)
{
//  Kint($view->id());
//  Kint($view);
  if ($view->id() == 'media' && $display_id == 'media_page_list') {
    $view->removeHandler($view->current_display, 'field', 'media_bulk_form');
  }

  // if ($view->id() == 'media_library' && $display_id == 'page') {
  //   $view->removeHandler($view->current_display, 'field', 'media_bulk_form');
  // }

  // if ($view->id() == 'user_admin_people' && $display_id == 'page_1') {
  //   // Kint($view);
  //   $view->removeHandler($view->current_display, 'field', 'user_bulk_form');
  // }

  if ($view->id() == 'content' && $display_id == 'page_1') {
    // Kint($view);
    $view->removeHandler($view->current_display, 'field', 'node_bulk_form');
  }

}


//Entity reference disponible sous form filter numeric uniquement
// https://www.drupal.org/project/drupal/issues/3347343

// Solution simplifié puis config dans view
// https://www.drupal.org/project/views_core_entity_reference

  function atommod_views_data_alter(&$data) {
    // Use entity reference for the field 'field_test_target'.
 
    $field_name = 'field_membres_contributeurs';
    $data['node__' . $field_name][$field_name . '_target_id']['filter']['id'] = 'entity_reference';
    // // kint($data);
  }

  function atommod_views_pre_render(ViewExecutable $view) {
    // Scramble the order of the rows shown on this result page.
    // Note that this could be done earlier, but not later in the view execution
    // process.
    if ($view->id() == 'contenus' && $view->current_display =="page_1") {
      // kint($view);
      // kint($view->result[0]->_entity);
      // kint($view->display_handler->handlers['field']['field_membres_contributeurs']);
    }
   
    // shuffle($view->result);
}


/**
 * Modifie les permissions pour permettre aux anonymes d'accéder aux comptes bloqués.
 */
function atommod_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Vérifiez si l'entité est un utilisateur et que l'opération est 'view'.
  if ($entity->getEntityTypeId() === 'user' && $operation === 'view') {
    // Permet l'accès aux utilisateurs anonymes même si le compte est bloqué.
    return AccessResult::allowed();
  }
  // Utilisez les permissions par défaut pour tout autre cas.
  return AccessResult::neutral();
}