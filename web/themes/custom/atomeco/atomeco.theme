<?php

declare(strict_types=1);

use Drupal\node\NodeInterface;
use Kint\Kint;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * @file
 * Functions to support theming in the atomeco theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function atomeco_preprocess_html(array &$variables): void {

      // $view_mode = $variables;
      // Kint($view_mode);
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof NodeInterface) {
        $variables['attributes']['class'][] = 'page-node-' . $node->getType();
        $variables['attributes']['class'][] = 'page-node-' . $node->id();
    
        // if ($node->hasField('field_structure_associee') && !$node->get('field_structure_associee')->isEmpty()) {
        //   $terms = $node->get('field_structure_associee')->getValue();
        //   $variables['attributes']['class'][] = 'page-node-structure' . $terms[0]['target_id'];
        // }
       
        //   $variables['attributes']['class'][] = 'page-node-verticale';
        
    
      } else {
        $variables['attributes']['class'][] = 'page-no-node';
      }
    
      if ($variables['root_path'] == 'user') {
        $variables['attributes']['class'][] = 'page-user';
      }

      $view = \Drupal::routeMatch()->getParameter('view_id');
    
      if ($view) {
        $current_path = \Drupal::service('path.current')->getPath();
        $internal_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    
        // Assign it to body class 
        $variables['attributes']['class'][] = str_replace("/", "", $internal_path);
      }
    
      // Prefetch Google fonts
      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'dns-prefetch',
            'href' => 'https//fonts.googleapis.com'
          ]
        ],
        "prefetch_fonts_googleapis"
      ];
      // Preconnect Google fonts
      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'preconnect',
            'href' => 'https://fonts.gstatic.com/',
            'crossorigin' => 'anonymous',
          ]
        ],
        "preconnect_fonts_gstatic"
      ];
    


}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function atomeco_preprocess_page(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function atomeco_preprocess_node(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 *
 * Cette fonction est utilisée pour prétraiter les variables avant qu'elles ne soient
 * passées au template de bloc `atomeco_site_branding`. Elle ajoute une variable
 * `is_front` qui indique si la page actuelle est la page d'accueil.
 *
 * @param array &$variables
 *   Un tableau de variables à passer au template.
 */
function atomeco_preprocess_block__atomeco_site_branding(&$variables) {
    // // Débogage : affiche "lala" dans le message de débogage.
    // dsm("lala");
    
    try {
        // Vérifie si la page actuelle est la page d'accueil.
        $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    }
    catch (Exception $e) {
        // En cas d'exception, définit 'is_front' à FALSE.
        $variables['is_front'] = FALSE;
    }
}

function atomeco_preprocess_views_view_field(&$variables) : void {
  // $variables['output'] = $variables['field']->advancedRender($variables['row']);

  $view = $variables['view'];
  $field = $variables['field'];

  // Vérifie si la vue est 'contenus', l'affichage actuel est 'page_1' et le champ est 'field_membres_contributeurs'
if ($view->storage->id() == 'contenus' &&  $view->current_display == 'page_1' &&  $field->field == 'field_membres_contributeurs') {

  // Charge l'entité utilisateur associée au champ 'field_membres_contributeurs'
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($variables['row']->nid);

 // Récupère l'ID de l'utilisateur associé au champ 'field_membres_contributeurs'
 $membreID = $node->get('field_membres_contributeurs')->getValue()[0]['target_id'];

  // // Charge l'entité utilisateur associée au champ 'field_membres_contributeurs'
  $membre = \Drupal::entityTypeManager()->getStorage('user')->load($membreID);

  // // Récupère le nom et le prénom de l'utilisateur
  $nom_membre = $membre->get('field_nom')->getValue()[0]['value']." ".$membre->get('field_prenom')->getValue()[0]['value'];
  
  // // Génère l'URL du profil de l'utilisateur
  $url_membre = $membre->toUrl();
  
  // // Crée un lien HTML vers le profil de l'utilisateur en utilisant la classe Link
  $lien_membre = Link::fromTextAndUrl($nom_membre, $url_membre)->toString();

  // // Définit la sortie du champ avec le lien HTML créé
  $variables['output'] = \Drupal\Core\Render\Markup::create($lien_membre);
}
}

